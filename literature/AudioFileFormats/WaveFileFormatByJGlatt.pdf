%PDF-1.5%‚„œ”
1 0 obj<</Pages 2 0 R/Outlines 6 0 R/Type/Catalog/Names 149 0 R/StructTreeRoot 7 0 R/Metadata 154 0 R/SpiderInfo 139 0 R>>endobj2 0 obj<</Count 19/Kids[37 0 R 36 0 R 62 0 R]/Type/Pages>>endobj3 0 obj<</ModDate(D:20031014122615+02'00')/CreationDate(D:20031014122613Z)/Title(WAVE File Format)/Producer(Acrobat Web Capture 6.0)>>endobj5 0 obj nullendobj6 0 obj<</Count 2/Type/Outlines/First 152 0 R/Last 152 0 R>>endobj7 0 obj<</Type/StructTreeRoot/K 9 0 R/ClassMap 8 0 R/ParentTree 12 0 R/ParentTreeNextKey 19>>endobj8 0 obj<</SpdrArt<</O/WebCapture>>>>endobj9 0 obj<</K 10 0 R/P 7 0 R/S/Document>>endobj10 0 obj<</K[0<</Type/MCR/MCID 0/Pg 17 0 R>><</Type/MCR/MCID 0/Pg 19 0 R>><</Type/MCR/MCID 0/Pg 21 0 R>><</Type/MCR/MCID 0/Pg 23 0 R>><</Type/MCR/MCID 0/Pg 25 0 R>><</Type/MCR/MCID 0/Pg 27 0 R>><</Type/MCR/MCID 0/Pg 29 0 R>><</Type/MCR/MCID 0/Pg 31 0 R>><</Type/MCR/MCID 0/Pg 33 0 R>><</Type/MCR/MCID 0/Pg 35 0 R>><</Type/MCR/MCID 0/Pg 45 0 R>><</Type/MCR/MCID 0/Pg 49 0 R>><</Type/MCR/MCID 0/Pg 53 0 R>><</Type/MCR/MCID 0/Pg 57 0 R>><</Type/MCR/MCID 0/Pg 61 0 R>><</Type/MCR/MCID 0/Pg 69 0 R>><</Type/MCR/MCID 0/Pg 73 0 R>><</Type/MCR/MCID 0/Pg 78 0 R>>]/C/SpdrArt/P 9 0 R/S/Article/Pg 11 0 R>>endobj11 0 obj<</ID 145 0 R/Annots 15 0 R/Contents 101 0 R/Type/Page/Parent 37 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 38 0 R/T1_1 39 0 R/T1_2 40 0 R/T1_3 41 0 R>>/ProcSet[/PDF/Text]>>/StructParents 0>>endobj12 0 obj<</Nums[0 13 0 R 1 18 0 R 2 20 0 R 3 22 0 R 4 24 0 R 5 26 0 R 6 28 0 R 7 30 0 R 8 32 0 R 9 34 0 R 10 44 0 R 11 48 0 R 12 52 0 R 13 56 0 R 14 60 0 R 15 66 0 R 16 72 0 R 17 77 0 R 18 81 0 R]>>endobj13 0 obj[10 0 R]endobj14 0 obj<</Rect[264.436005 646.599976 438.246002 661.599976]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</URI(http://www.borg.com/~jglatt/tech/aboutiff.htm)/S/URI>>>>endobj15 0 obj[14 0 R 16 0 R]endobj16 0 obj<</Rect[362.119995 424.415405 535.929993 439.415405]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</URI(http://www.borg.com/~jglatt/tech/aboutiff.htm)/S/URI>>>>endobj17 0 obj<</ID 145 0 R/Contents 103 0 R/Type/Page/Parent 37 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 38 0 R/T1_1 41 0 R/T1_2 39 0 R>>/ProcSet[/PDF/Text]>>/StructParents 1>>endobj18 0 obj[10 0 R]endobj19 0 obj<</ID 145 0 R/Contents 105 0 R/Type/Page/Parent 37 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 38 0 R/T1_1 41 0 R/T1_2 39 0 R>>/ProcSet[/PDF/Text]>>/StructParents 2>>endobj20 0 obj[10 0 R]endobj21 0 obj<</ID 145 0 R/Contents 107 0 R/Type/Page/Parent 37 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 38 0 R/T1_1 41 0 R>>/ProcSet[/PDF/Text]>>/StructParents 3>>endobj22 0 obj[10 0 R]endobj23 0 obj<</ID 145 0 R/Contents 109 0 R/Type/Page/Parent 37 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 38 0 R/T1_1 40 0 R/T1_2 41 0 R>>/ProcSet[/PDF/Text]>>/StructParents 4>>endobj24 0 obj[10 0 R]endobj25 0 obj<</ID 145 0 R/Contents 111 0 R/Type/Page/Parent 36 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 38 0 R/T1_1 41 0 R/T1_2 39 0 R/T1_3 63 0 R>>/ProcSet[/PDF/Text]>>/StructParents 5>>endobj26 0 obj[10 0 R]endobj27 0 obj<</ID 145 0 R/Contents 113 0 R/Type/Page/Parent 36 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 38 0 R/T1_1 63 0 R/T1_2 40 0 R>>/ProcSet[/PDF/Text]>>/StructParents 6>>endobj28 0 obj[10 0 R]endobj29 0 obj<</ID 145 0 R/Contents 115 0 R/Type/Page/Parent 36 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 38 0 R/T1_1 39 0 R/T1_2 63 0 R/T1_3 40 0 R/T1_4 74 0 R>>/ProcSet[/PDF/Text]>>/StructParents 7>>endobj30 0 obj[10 0 R]endobj31 0 obj<</ID 145 0 R/Contents 117 0 R/Type/Page/Parent 36 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 38 0 R/T1_1 39 0 R/T1_2 63 0 R>>/ProcSet[/PDF/Text]>>/StructParents 8>>endobj32 0 obj[10 0 R]endobj33 0 obj<</ID 145 0 R/Contents 121 0 R/Type/Page/Parent 36 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 38 0 R/T1_1 63 0 R>>/ProcSet[/PDF/Text]>>/StructParents 9>>endobj34 0 obj[10 0 R]endobj35 0 obj<</ID 145 0 R/Contents 123 0 R/Type/Page/Parent 62 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 38 0 R/T1_1 39 0 R/T1_2 63 0 R/T1_3 40 0 R>>/ProcSet[/PDF/Text]>>/StructParents 10>>endobj36 0 obj<</Count 5/Kids[25 0 R 27 0 R 29 0 R 31 0 R 33 0 R]/Type/Pages/Parent 2 0 R>>endobj37 0 obj<</Count 5/Kids[11 0 R 17 0 R 19 0 R 21 0 R 23 0 R]/Type/Pages/Parent 2 0 R>>endobj38 0 obj<</Type/Font/Encoding/WinAnsiEncoding/BaseFont/Times-Roman/Subtype/Type1>>endobj39 0 obj<</Type/Font/Encoding/WinAnsiEncoding/BaseFont/Helvetica-Bold/Subtype/Type1>>endobj40 0 obj<</Type/Font/Encoding/WinAnsiEncoding/BaseFont/Times-Bold/Subtype/Type1>>endobj41 0 obj<</Type/Font/Encoding/WinAnsiEncoding/BaseFont/Courier/Subtype/Type1>>endobj44 0 obj[10 0 R]endobj45 0 obj<</ID 145 0 R/Contents 125 0 R/Type/Page/Parent 62 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 38 0 R/T1_1 39 0 R/T1_2 63 0 R/T1_3 40 0 R>>/ProcSet[/PDF/Text]>>/StructParents 11>>endobj48 0 obj[10 0 R]endobj49 0 obj<</ID 145 0 R/Contents 127 0 R/Type/Page/Parent 62 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 38 0 R/T1_1 63 0 R/T1_2 39 0 R/T1_3 40 0 R>>/ProcSet[/PDF/Text]>>/StructParents 12>>endobj52 0 obj[10 0 R]endobj53 0 obj<</ID 145 0 R/Contents 129 0 R/Type/Page/Parent 62 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 38 0 R/T1_1 39 0 R/T1_2 63 0 R/T1_3 40 0 R>>/ProcSet[/PDF/Text]>>/StructParents 13>>endobj56 0 obj[10 0 R]endobj57 0 obj<</ID 145 0 R/Contents 131 0 R/Type/Page/Parent 62 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 38 0 R/T1_1 40 0 R/T1_2 39 0 R/T1_3 63 0 R>>/ProcSet[/PDF/Text]>>/StructParents 14>>endobj60 0 obj[10 0 R]endobj61 0 obj<</ID 145 0 R/Annots 68 0 R/Contents 133 0 R/Type/Page/Parent 62 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 38 0 R/T1_1 63 0 R/T1_2 40 0 R/T1_3 41 0 R>>/ProcSet[/PDF/Text]>>/StructParents 15>>endobj62 0 obj<</Count 9/Kids[35 0 R 45 0 R 49 0 R 53 0 R 57 0 R 61 0 R 69 0 R 73 0 R 78 0 R]/Type/Pages/Parent 2 0 R>>endobj63 0 obj<</Type/Font/Encoding/WinAnsiEncoding/BaseFont/Courier-Bold/Subtype/Type1>>endobj66 0 obj[10 0 R]endobj67 0 obj<</Rect[280.227997 610.799988 380.174011 625.799988]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</URI(http://www.borg.com/~jglatt/tech/midispec.htm#Common)/S/URI>>>>endobj68 0 obj[67 0 R]endobj69 0 obj<</ID 145 0 R/Contents 135 0 R/Type/Page/Parent 62 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 38 0 R/T1_1 39 0 R/T1_2 63 0 R>>/ProcSet[/PDF/Text]>>/StructParents 16>>endobj72 0 obj[10 0 R]endobj73 0 obj<</ID 145 0 R/Contents 137 0 R/Type/Page/Parent 62 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 38 0 R/T1_1 39 0 R/T1_2 63 0 R>>/ProcSet[/PDF/Text]>>/StructParents 17>>endobj74 0 obj<</Type/Font/Encoding/WinAnsiEncoding/BaseFont/Times-Italic/Subtype/Type1>>endobj77 0 obj[10 0 R]endobj78 0 obj<</ID 145 0 R/Contents 119 0 R/Type/Page/Parent 62 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 38 0 R/T1_1 63 0 R/T1_2 40 0 R>>/ProcSet[/PDF/Text]>>/StructParents 18>>endobj81 0 obj[10 0 R]endobj100 0 obj 3467endobj101 0 obj<</Length 100 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(WAVE File Format)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/T1_0 1 Tf
14 0 0 14 10 753.97552 Tm
(WAVE File Format is a file format for storing digital audio \(waveform\)\ data. It supports a variety of bit )Tj
0 -1.2 TD
(resolutions, sample rates, and channels of audio. This format is very po\pular upon IBM PC \(clone\) )Tj
T*
(platforms, and is widely used in professional programs that process digi\tal audio waveforms. It takes )Tj
T*
(into account some peculiarities of the Intel CPU such as little endian b\yte order. )Tj
0 -2.55714 TD
(This format uses Microsoft's version of the Electronic Arts Interchange \File Format method for storing )Tj
0 -1.2 TD
(data in "chunks". You should read the article )Tj
ET
0 0 1 RG
0.7056 w 10 M 0 j 0 J []0 d 
264.436 648.8587 m
438.24603 648.8587 l
S
0 0 1 rg
BT
/T1_0 1 Tf
14 0 0 14 264.436 650.97552 Tm
(About Interchange File Format)Tj
0 0 0 rg
( before proceeding.)Tj
1 0.50197 0.25098 rg
/T1_1 1 Tf
16.15384 0 0 16.15384 10 611.04572 Tm
(Data Types)Tj
0 0 0 rg
/T1_0 1 Tf
14 0 0 14 10 574.79095 Tm
(A C-like language will be used to describe the data structures in the fi\le. A few extra data types that are )Tj
T*
(not part of standard C, but which will be used in this document, are:)Tj
/T1_2 1 Tf
1.5 -4.05714 Td
(pstring)Tj
/T1_0 1 Tf
4.62743 0 Td
(Pascal-style string, a one-byte count followed by that many text bytes. \The total )Tj
T*
(number of bytes in this data type should be even. A pad byte can be adde\d to the end )Tj
T*
(of the text to accomplish this. This pad byte is not reflected in the co\unt.)Tj
/T1_2 1 Tf
-4.62743 -2.77142 Td
(ID)Tj
/T1_0 1 Tf
4.62743 0 Td
(A chunk ID \(ie, 4 ASCII bytes\) as described in )Tj
ET
362.12 426.67413 m
535.92999 426.67413 l
S
0 0 1 rg
BT
/T1_0 1 Tf
14 0 0 14 362.12 428.79092 Tm
(About Interchange File Format)Tj
0 0 0 rg
(.)Tj
-25.15143 -4.2 Td
(Also note that when you see an array with no size specification \(e.g., \char ckData[];\), this indicates a )Tj
T*
(variable-sized array in our C-like language. This differs from standard \C arrays.)Tj
1 0.50197 0.25098 rg
/T1_1 1 Tf
16.15384 0 0 16.15384 10 315.26111 Tm
(Constants)Tj
0 0 0 rg
/T1_0 1 Tf
14 0 0 14 10 279.00632 Tm
(Decimal values are referred to as a string of digits, for example 123, 0\, 100 are all decimal numbers. )Tj
T*
(Hexadecimal values are preceded by a 0x - e.g., 0x0A, 0x1, 0x64. )Tj
1 0.50197 0.25098 rg
/T1_1 1 Tf
16.15384 0 0 16.15384 10 224.27649 Tm
(Data Organization)Tj
0 0 0 rg
/T1_0 1 Tf
14 0 0 14 10 188.0217 Tm
(All data is stored in 8-bit bytes, arranged in Intel 80x86 \(ie, little \endian\) format. The bytes of multiple-)Tj
T*
(byte values are stored with the low-order \(ie, least significant\) byte\s first. Data bits are as follows \(ie, )Tj
T*
(shown with bit numbers on top, "lsb" stands for "least significant byte"\ and "msb" stands for "most )Tj
T*
(significant byte"\): )Tj
/T1_3 1 Tf
0 -2.56197 TD
(         7  6  5  4  3  2  1  0)Tj
0 -1.2 TD
(       +-----------------------+)Tj
T*
( char: | lsb                   |)Tj
T*
(       +-----------------------+)Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(http://www.borg.com/~jglatt/tech/wave.htm \(1 of 19\)14.10.2003 14:26:15\)Tj
ET
EMC 

endstreamendobj102 0 obj 3060endobj103 0 obj<</Length 102 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(WAVE File Format)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/T1_1 1 Tf
14 0 0 14 10 737.10815 Tm
(         7  6  5  4  3  2  1  0 15 14 13 12 11 10  9  8)Tj
0 -1.2 TD
(       +-----------------------+-----------------------+)Tj
T*
(short: | lsb     byte 0        |       byte 1      msb |)Tj
T*
(       +-----------------------+-----------------------+)Tj
0 -2.39999 TD
(         7  6  5  4  3  2  1  0 15 14 13 12 11 10  9  8 23 22 21 20 )Tj
0 -1.2 TD
(19 18 17 16 31 30 29 28 27 26 25 24)Tj
T*
(       +-----------------------+-----------------------)Tj
T*
(+-----------------------+-----------------------+)Tj
T*
( long: | lsb     byte 0        |       byte 1          |         byte )Tj
T*
(2              |       byte 3      msb |)Tj
T*
(       +-----------------------+-----------------------)Tj
T*
(+-----------------------+-----------------------+)Tj
1 0.50197 0.25098 rg
/T1_2 1 Tf
16.15384 0 0 16.15384 10 497.64572 Tm
(File Structure)Tj
0 0 0 rg
/T1_0 1 Tf
14 0 0 14 10 461.39093 Tm
(A WAVE file is a collection of a number of different types of chunks. Th\ere is a required Format \("fmt )Tj
T*
("\) chunk which contains important parameters describing the waveform, s\uch as its sample rate. The )Tj
T*
(Data chunk, which contains the actual waveform data, is also required. A\ll other chunks are optional. )Tj
T*
(Among the other optional chunks are ones which define cue points, list i\nstrument parameters, store )Tj
T*
(application-specific information, etc. All of these chunks are described\ in detail in the following sections )Tj
T*
(of this document. )Tj
0 -2.55714 TD
(All applications that use WAVE must be able to read the 2 required chunk\s and can choose to )Tj
0 -1.2 TD
(selectively ignore the optional chunks. A program that copies a WAVE sho\uld copy all of the chunks in )Tj
T*
(the WAVE, even those it chooses not to interpret.)Tj
0 -2.55714 TD
(There are no restrictions upon the order of the chunks within a WAVE fil\e, with the exception that the )Tj
0 -1.2 TD
(Format chunk must precede the Data chunk. Some inflexibly written progra\ms expect the Format chunk )Tj
T*
(as the first chunk \(after the RIFF header\) although they shouldn't bec\ause the specification doesn't )Tj
T*
(require this.)Tj
0 -2.55714 TD
(Here is a graphical overview of an example, minimal WAVE file. It consis\ts of a single WAVE )Tj
0 -1.2 TD
(containing the 2 required chunks, a Format and a Data Chunk.)Tj
/T1_1 1 Tf
0 -2.56197 TD
( __________________________)Tj
0 -1.2 TD
(| RIFF WAVE Chunk          |)Tj
T*
(|   groupID  = 'RIFF'      |)Tj
T*
(|   riffType = 'WAVE'      |)Tj
T*
(|    __________________    |)Tj
T*
(|   | Format Chunk     |   |)Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(http://www.borg.com/~jglatt/tech/wave.htm \(2 of 19\)14.10.2003 14:26:15\)Tj
ET
EMC 

endstreamendobj104 0 obj 3821endobj105 0 obj<</Length 104 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(WAVE File Format)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/T1_1 1 Tf
14 0 0 14 10 753.90814 Tm
(|   |   ckID = 'fmt '  |   |)Tj
0 -1.2 TD
(|   |__________________|   |)Tj
T*
(|    __________________    |)Tj
T*
(|   | Sound Data Chunk |   |)Tj
T*
(|   |   ckID = 'data'  |   |)Tj
T*
(|   |__________________|   |)Tj
T*
(|__________________________|)Tj
/T1_2 1 Tf
0 -2.56966 TD
(A Bastardized Standard)Tj
/T1_0 1 Tf
0 -2.53981 TD
(The WAVE format is sort of a bastardized standard that was concocted by \too many "cooks" who didn't )Tj
0 -1.2 TD
(properly coordinate the addition of "ingredients" to the "soup". Unlike \with the AIFF standard which )Tj
T*
(was mostly designed by a small, coordinated group, the WAVE format has h\ad all manner of much-too-)Tj
T*
(independent, uncoordinated aberrations inflicted upon it. The net result\ is that there are far too many )Tj
T*
(chunks that may be found in a WAVE file -- many of them duplicating the \same information found in )Tj
T*
(other chunks \(but in an unnecessarily different way\) simply because th\ere have been too many )Tj
T*
(programmers who took too many liberties with unilaterally adding their o\wn additions to the WAVE )Tj
T*
(format without properly coming to a concensus of what everyone else need\ed \(and therefore it )Tj
T*
(encouraged an "every man for himself" attitude toward adding things to t\his "standard"\). One example is )Tj
T*
(the Instrument chunk versus the Sampler chunk. Another example is the No\te versus Label chunks in an )Tj
T*
(Associated Data List. I don't even want to get into the totally irrespon\sible proliferation of compressed )Tj
T*
(formats. \(ie, It seems like everyone and his pet Dachshound has come up\ with some compressed version )Tj
T*
(of storing wave data -- like we need 100 different ways to do that\). Fu\rthermore, there are lots of )Tj
T*
(inconsistencies, for example how 8-bit data is unsigned, but 16-bit data\ is signed. )Tj
0 -2.55714 TD
(I've attempted to document only those aspects that you're very likely to\ encounter in a WAVE file. I )Tj
0 -1.2 TD
(suggest that you concentrate upon these and refuse to support the work o\f programmers who feel the )Tj
T*
(need to deviate from a standard with inconsistent, proprietary, self-ser\ving, unnecessary extensions. )Tj
T*
(Please do your part to rein in half-assed programming.)Tj
1 0.50197 0.25098 rg
/T1_2 1 Tf
16.15384 0 0 16.15384 10 239.04573 Tm
(Sample Points and Sample Frames)Tj
0 0 0 rg
/T1_0 1 Tf
14 0 0 14 10 202.79094 Tm
(A large part of interpreting WAVE files revolves around the two concepts\ of sample points and sample )Tj
T*
(frames. )Tj
0 -2.55714 TD
(A sample point is a value representing a sample of a sound at a given mo\ment in time. For waveforms )Tj
0 -1.2 TD
(with greater than 8-bit resolution, each sample point is stored as a lin\ear, 2's-complement value which )Tj
T*
(may be from 9 to 32 bits wide \(as determined by the wBitsPerSample fiel\d in the Format Chunk, )Tj
T*
(assuming PCM format -- an uncompressed format\). For example, each sampl\e point of a 16-bit )Tj
T*
(waveform would be a 16-bit word \(ie, two 8-bit bytes\) where 32767 \(0x\7FFF\) is the highest value and -)Tj
T*
(32768 \(0x8000\) is the lowest value. For 8-bit \(or less\) waveforms, e\ach sample point is a linear, )Tj
T*
(unsigned byte where 255 is the highest value and 0 is the lowest value. \Obviously, this signed/unsigned )Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(http://www.borg.com/~jglatt/tech/wave.htm \(3 of 19\)14.10.2003 14:26:15\)Tj
ET
EMC 

endstreamendobj106 0 obj 3898endobj107 0 obj<</Length 106 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(WAVE File Format)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/T1_0 1 Tf
14 0 0 14 10 753.97552 Tm
(sample point discrepancy between 8-bit and larger resolution waveforms w\as one of those "oops" )Tj
0 -1.2 TD
(scenarios where some Microsoft employee decided to change the sign somet\ime after 8-bit wave files )Tj
T*
(were common but 16-bit wave files hadn't yet appeared.)Tj
0 -2.55714 TD
(Because most CPU's read and write operations deal with 8-bit bytes, it w\as decided that a sample point )Tj
0 -1.2 TD
(should be rounded up to a size which is a multiple of 8 when stored in a\ WAVE. This makes the WAVE )Tj
T*
(easier to read into memory. If your ADC produces a sample point from 1 t\o 8 bits wide, a sample point )Tj
T*
(should be stored in a WAVE as an 8-bit byte \(ie, unsigned char\). If yo\ur ADC produces a sample point )Tj
T*
(from 9 to 16 bits wide, a sample point should be stored in a WAVE as a 1\6-bit word \(ie, signed short\). If )Tj
T*
(your ADC produces a sample point from 17 to 24 bits wide, a sample point\ should be stored in a WAVE )Tj
T*
(as three bytes. If your ADC produces a sample point from 25 to 32 bits w\ide, a sample point should be )Tj
T*
(stored in a WAVE as a 32-bit doubleword \(ie, signed long\). Etc.)Tj
0 -2.55714 TD
(Furthermore, the data bits should be left-justified, with any remaining \\(ie, pad\) bits zeroed. For example, )Tj
0 -1.2 TD
(consider the case of a 12-bit sample point. It has 12 bits, so the sampl\e point must be saved as a 16-bit )Tj
T*
(word. Those 12 bits should be left-justified so that they become bits 4 \to 15 inclusive, and bits 0 to 3 )Tj
T*
(should be set to zero. Shown below is how a 12-bit sample point with a v\alue of binary 101000010111 is )Tj
T*
(formatted left-justified as a 16-bit word.)Tj
/T1_1 1 Tf
0 -2.56195 TD
( ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___)Tj
0 -1.2 TD
(|   |     |   |   |   | |   |   |   |   |   |   |   |   |   |   |)Tj
T*
(| 1   0   1   0   0   0   0   1   0   1   1   1   0   0   0   0 |)Tj
T*
(|___|___|___|___|___|___|___|___|___|___|___|___|___|___|___|___|)Tj
T*
( <---------------------------------------------> <------------->)Tj
T*
(    12 bit sample point is left justified          rightmost)Tj
T*
(                                                  4 bits are)Tj
T*
(                                                  zero padded)Tj
/T1_0 1 Tf
0 -2.55232 TD
(But note that, because the WAVE format uses Intel little endian byte ord\er, the LSB is stored first in the )Tj
0 -1.2 TD
(wave file as so: )Tj
/T1_1 1 Tf
0 -2.56197 TD
( ___ ___ ___ ___ ___ ___ ___ ___    ___ ___ ___ ___ ___ ___ ___ ___)Tj
0 -1.2 TD
(|   |     |   |   |   | |   |   |  |   |   |   |   |   |   |   |   |)Tj
T*
(| 0   1   1   1   0   0   0   0 |  | 1   0   1   0   0   0   0   1 |)Tj
T*
(|___|___|___|___|___|___|___|___|  |___|___|___|___|___|___|___|___|)Tj
T*
( <-------------> <------------->    <----------------------------->)Tj
T*
(   bits 0 to 3     4 pad bits                 bits 4 to 11)Tj
/T1_0 1 Tf
0 -2.55232 TD
(For multichannel sounds \(for example, a stereo waveform\), single sampl\e points from each channel are )Tj
0 -1.2 TD
(interleaved. For example, assume a stereo \(ie, 2 channel\) waveform. In\stead of storing all of the sample )Tj
T*
(points for the left channel first, and then storing all of the sample po\ints for the right channel next, you )Tj
T*
("mix" the two channels' sample points together. You would store the firs\t sample point of the left )Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(http://www.borg.com/~jglatt/tech/wave.htm \(4 of 19\)14.10.2003 14:26:15\)Tj
ET
EMC 

endstreamendobj108 0 obj 3000endobj109 0 obj<</Length 108 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(WAVE File Format)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/T1_0 1 Tf
14 0 0 14 10 753.97552 Tm
(channel. Next, you would store the first sample point of the right chann\el. Next, you would store the )Tj
0 -1.2 TD
(second sample point of the left channel. Next, you would store the secon\d sample point of the right )Tj
T*
(channel, and so on, alternating between storing the next sample point of\ each channel. This is what is )Tj
T*
(meant by interleaved data; you store the next sample point of each of th\e channels in turn, so that the )Tj
T*
(sample points that are meant to be "played" \(ie, sent to a DAC\) simult\aneously are stored contiguously. )Tj
0 -2.55714 TD
(The sample points that are meant to be "played" \(ie, sent to a DAC\) si\multaneously are collectively )Tj
0 -1.2 TD
(called a )Tj
/T1_1 1 Tf
(sample frame)Tj
/T1_0 1 Tf
(. In the example of our stereo waveform, every two sample points makes u\p )Tj
T*
(another sample frame. This is illustrated below for that stereo example.\ )Tj
/T1_2 1 Tf
0 -2.56197 TD
(  sample       sample              sample)Tj
0 -1.2 TD
(  frame 0      frame 1             frame N)Tj
T*
( _____ _____ _____ _____         _____ _____)Tj
T*
(| ch1 | ch2 | ch1 | ch2 | . . . | ch1 | ch2 |)Tj
T*
(|_____|_____|_____|_____|       |_____|_____|)Tj
T*
( _____)Tj
T*
(|     | = one sample point)Tj
T*
(|_____|)Tj
/T1_0 1 Tf
0 -2.55232 TD
(For a monophonic waveform, a sample frame is merely a single sample poin\t \(ie, there's nothing to )Tj
0 -1.2 TD
(interleave\). For multichannel waveforms, you should follow the conventi\ons shown below for which )Tj
T*
(order to store channels within the sample frame. \(ie, Below, a single s\ample frame is displayed for each )Tj
T*
(example of a multichannel waveform\). )Tj
/T1_2 1 Tf
0 -2.56197 TD
(  channels       1         2)Tj
0 -1.2 TD
(             _________ _________ )Tj
T*
(            | left    | right   |)Tj
0 -1.20001 TD
(  stereo    |         |         |)Tj
0 -1.2 TD
(            |_________|_________|)Tj
0 -3.59999 TD
(                 1         2         3)Tj
0 -1.20001 TD
(             _________ _________ _________ )Tj
0 -1.2 TD
(            | left    | right   | center  |)Tj
T*
(  3 channel |         |         |         |)Tj
T*
(            |_________|_________|_________|)Tj
0 -2.39999 TD
(                 1         2         3         4)Tj
0 -1.2 TD
(             _________ _________ _________ _________ )Tj
T*
(            | front   | front   | rear    | rear    |)Tj
T*
(  quad      | left    | right   | left    | right   |)Tj
T*
(            |_________|_________|_________|_________|)Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(http://www.borg.com/~jglatt/tech/wave.htm \(5 of 19\)14.10.2003 14:26:15\)Tj
ET
EMC 

endstreamendobj110 0 obj 3078endobj111 0 obj<</Length 110 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(WAVE File Format)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/T1_1 1 Tf
14 0 0 14 10 752.70813 Tm
(                 1         2         3         4)Tj
0 -1.2 TD
(             _________ _________ _________ _________ )Tj
T*
(            | left    | center  | right   | surround|)Tj
T*
(  4 channel |         |         |         |         |)Tj
T*
(            |_________|_________|_________|_________|)Tj
0 -2.39999 TD
(                 1         2         3         4         5         6)Tj
0 -1.2 TD
(             _________ _________ _________ _________ _________ )Tj
T*
(_________)Tj
T*
(            | left    | left    | center  | right   | right   |)Tj
T*
(surround |)Tj
T*
(  6 channel | center  |         |         | center  |         )Tj
T*
(|         |)Tj
T*
(            |_________|_________|_________|_________|_________|)Tj
T*
(_________|)Tj
/T1_0 1 Tf
0 -2.55232 TD
(The sample points within a sample frame are packed together; there are n\o unused bytes between them. )Tj
0 -1.2 TD
(Likewise, the sample frames are packed together with no pad bytes. )Tj
0 -2.55714 TD
(Note that the above discussion outlines the format of data within an unc\ompressed data chunk. There are )Tj
0 -1.2 TD
(some techniques of storing compressed data in a data chunk. Obviously, t\hat data would need to be )Tj
T*
(uncompressed, and then it will adhere to the above layout.)Tj
ET
0.5 0.5 0.5 rg
10 362.80002 m
10 364.80002 l
602 364.80002 l
601 363.80002 l
11 363.80002 l
11 363.80002 l
h
f
0.875 0.875 0.875 rg
602 364.80002 m
602 362.80002 l
10 362.80002 l
11 363.80002 l
601 363.80002 l
601 363.80002 l
h
f
1 0.50197 0.25098 rg
BT
/T1_2 1 Tf
16.15384 0 0 16.15384 10 322.64572 Tm
(Format chunk)Tj
0 0 0 rg
/T1_0 1 Tf
14 0 0 14 10 286.39093 Tm
(The Format \(fmt\) chunk describes fundamental parameters of the wavefor\m data such as sample rate, bit )Tj
T*
(resolution, and how many channels of digital audio are stored in the WAV\E. )Tj
0 0.50197 0 rg
/T1_3 1 Tf
0 -2.56197 TD
(#define)Tj
0 0 0 rg
( FormatID 'fmt '   )Tj
0.64706 0.1647 0.1647 rg
(/* chunkID for Format Chunk. NOTE: There is )Tj
0 -1.2 TD
(a space at the end of this ID. */)Tj
0 0.50197 0 rg
0 -2.39999 TD
(typedef struct)Tj
0 0 0 rg
( {)Tj
0 -1.2 TD
(  ID             chunkID;)Tj
T*
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(           chunkSize;)Tj
0 -2.39999 TD
(  )Tj
0 0.50197 0 rg
(short)Tj
0 0 0 rg
(          wFormatTag;)Tj
0 -1.2 TD
(  )Tj
0 0.50197 0 rg
(unsigned short)Tj
0 0 0 rg
( wChannels;)Tj
T*
(  )Tj
0 0.50197 0 rg
(unsigned long)Tj
0 0 0 rg
(  dwSamplesPerSec;)Tj
T*
(  )Tj
0 0.50197 0 rg
(unsigned long)Tj
0 0 0 rg
(  dwAvgBytesPerSec;)Tj
T*
(  )Tj
0 0.50197 0 rg
(unsigned short)Tj
0 0 0 rg
( wBlockAlign;)Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(http://www.borg.com/~jglatt/tech/wave.htm \(6 of 19\)14.10.2003 14:26:15\)Tj
ET
EMC 

endstreamendobj112 0 obj 3560endobj113 0 obj<</Length 112 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(WAVE File Format)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/T1_1 1 Tf
14 0 0 14 10 753.90814 Tm
(  )Tj
0 0.50197 0 rg
(unsigned short)Tj
0 0 0 rg
( wBitsPerSample;)Tj
0.64706 0.1647 0.1647 rg
0 -2.39999 TD
(/* Note: there may be additional fields here, depending upon )Tj
0 -1.2 TD
(wFormatTag. */)Tj
0 0 0 rg
0 -2.39999 TD
(} FormatChunk;)Tj
/T1_0 1 Tf
0 -2.55232 TD
(The ID is always ")Tj
/T1_2 1 Tf
(fmt )Tj
/T1_0 1 Tf
(". The chunkSize field is the number of bytes in the chunk. This does no\t include )Tj
0 -1.2 TD
(the 8 bytes used by ID and Size fields. For the Format Chunk, chunkSize \may vary according to what )Tj
T*
("format" of WAVE file is specified \(ie, depends upon the value of wForm\atTag\). )Tj
0 -2.55714 TD
(WAVE data may be stored without compression, in which case the sample po\ints are stored as described )Tj
0 -1.2 TD
(in )Tj
/T1_2 1 Tf
(Sample Points and Sample Frames)Tj
/T1_0 1 Tf
(. Alternately, different forms of compression may be used when )Tj
T*
(storing the sound data in the Data chunk. With compression, each sample \point may take a differing )Tj
T*
(number of bytes to store. The wFormatTag indicates whether compression i\s used when storing the data.)Tj
0 -2.55714 TD
(If compression is used \(ie, WFormatTag is some value other than 1\), th\en there will be additional fields )Tj
0 -1.2 TD
(appended to the Format chunk which give needed information for a program\ wishing to retrieve and )Tj
T*
(decompress that stored data. The first such additional field will be an \unsigned short that indicates how )Tj
T*
(many more bytes have been appended \(after this unsigned short\). Furthe\rmore, compressed formats must )Tj
T*
(have a Fact chunk which contains an unsigned long indicating the size \(\in sample points\) of the )Tj
T*
(waveform after it has been decompressed. There are \(too\) many compress\ed formats. Details about them )Tj
T*
(can be gotten from Microsoft's web site.)Tj
0 -2.55714 TD
(If no compression is used \(ie, wFormatTag = 1\), then there are no furt\her fields.)Tj
T*
(The wChannels field contains the number of audio channels for the sound.\ A value of 1 means )Tj
0 -1.2 TD
(monophonic sound, 2 means stereo, 4 means four channel sound, etc. Any n\umber of audio channels )Tj
T*
(may be represented. For multichannel sounds, single sample points from e\ach channel are interleaved. A )Tj
T*
(set of interleaved sample points is called a sample frame.)Tj
0 -2.55714 TD
(The actual waveform data is stored in another chunk, the Data Chunk, whi\ch will be described later.)Tj
T*
(The dwSamplesPerSec field is the sample rate at which the sound is to be\ played back in sample frames )Tj
0 -1.2 TD
(per second \(ie, Hertz\). The 3 standard MPC rates are 11025, 22050, and\ 44100 KHz, although other )Tj
T*
(rates may be used.)Tj
0 -2.55714 TD
(The dwAvgBytesPerSec field indicates how many bytes play every second. d\wAvgBytesPerSec may be )Tj
0 -1.2 TD
(used by an application to estimate what size RAM buffer is needed to pro\perly playback the WAVE )Tj
T*
(without latency problems. Its value should be equal to the following for\mula rounded up to the next )Tj
T*
(whole number:)Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(http://www.borg.com/~jglatt/tech/wave.htm \(7 of 19\)14.10.2003 14:26:15\)Tj
ET
EMC 

endstreamendobj114 0 obj 2863endobj115 0 obj<</Length 114 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(WAVE File Format)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/T1_0 1 Tf
14 0 0 14 10 753.97552 Tm
(dwSamplesPerSec * wBlockAlign)Tj
0 -2.55714 TD
(The wBlockAlign field should be equal to the following formula, rounded \to the next whole number:)Tj
T*
(wChannels * \(wBitsPerSample / 8\))Tj
T*
(Essentially, wBlockAlign is the size of a sample frame, in terms of byte\s. \(eg, A sample frame for a 16-)Tj
0 -1.2 TD
(bit mono wave is 2 bytes. A sample frame for a 16-bit stereo wave is 4 b\ytes. Etc\).)Tj
0 -2.55714 TD
(The wBitsPerSample field indicates the bit resolution of a sample point \\(ie, a 16-bit waveform would )Tj
0 -1.2 TD
(have wBitsPerSample = 16\).)Tj
0 -2.55714 TD
(One, and only one, Format Chunk is required in every WAVE.)Tj
ET
0.5 0.5 0.5 rg
10 508.60001 m
10 510.60001 l
602 510.60001 l
601 509.60001 l
11 509.60001 l
11 509.60001 l
h
f
0.875 0.875 0.875 rg
602 510.60001 m
602 508.60001 l
10 508.60001 l
11 509.60001 l
601 509.60001 l
601 509.60001 l
h
f
1 0.50197 0.25098 rg
BT
/T1_1 1 Tf
16.15384 0 0 16.15384 10 468.44574 Tm
(Data chunk)Tj
0 0 0 rg
/T1_0 1 Tf
14 0 0 14 10 432.19092 Tm
(The Data \(data\) chunk contains the actual sample frames \(ie, all chan\nels of waveform data\).)Tj
0 0.50197 0 rg
/T1_2 1 Tf
0 -2.56197 TD
(#define)Tj
0 0 0 rg
( DataID 'data'  )Tj
0.64706 0.1647 0.1647 rg
(/* chunk ID for data Chunk */)Tj
0 0.50197 0 rg
0 -2.39999 TD
(typedef struct)Tj
0 0 0 rg
( {)Tj
0 -1.2 TD
(  ID             chunkID;)Tj
T*
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(           chunkSize;)Tj
0 -2.39999 TD
(  )Tj
0 0.50197 0 rg
(unsigned char)Tj
0 0 0 rg
(  waveformData[];)Tj
0 -1.2 TD
(} DataChunk;)Tj
/T1_0 1 Tf
0 -2.55232 TD
(The ID is always )Tj
/T1_3 1 Tf
(data)Tj
/T1_0 1 Tf
(. chunkSize is the number of bytes in the chunk, not counting the 8 byte\s used by )Tj
0 -1.2 TD
(ID and Size fields nor any possible pad byte needed to make the chunk an\ even size \(ie, chunkSize is the )Tj
T*
(number of remaining bytes in the chunk after the chunkSize field, not co\unting any trailing pad byte\). )Tj
0 -2.55714 TD
(Remember that the bit resolution, and other information is gotten from t\he Format chunk.)Tj
T*
(The following discussion assumes uncompressed data.)Tj
T*
(The waveformData array contains the actual waveform data. The data is ar\ranged into what are called )Tj
/T1_4 1 Tf
0 -1.2 TD
(sample frames)Tj
/T1_0 1 Tf
(. For more information on the arrangment of data, see "Sample Points and\ Sample )Tj
T*
(Frames".)Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(http://www.borg.com/~jglatt/tech/wave.htm \(8 of 19\)14.10.2003 14:26:15\)Tj
ET
EMC 

endstreamendobj116 0 obj 3274endobj117 0 obj<</Length 116 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(WAVE File Format)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/T1_0 1 Tf
14 0 0 14 10 753.97552 Tm
(You can determine how many bytes of actual waveform data there is from t\he Data chunk's chunkSize )Tj
0 -1.2 TD
(field. The number of sample frames in waveformData is determined by divi\ding this chunkSize by the )Tj
T*
(Format chunk's wBlockAlign.)Tj
0 -2.55714 TD
(The Data Chunk is required. One, and only one, Data Chunk may appear in \a WAVE.)Tj
/T1_1 1 Tf
0 -2.57446 TD
(Another way of storing waveform data)Tj
/T1_0 1 Tf
0 -2.53983 TD
(So, you're thinking "This WAVE format isn't that bad. It seems to make s\ense and there aren't all that )Tj
0 -1.2 TD
(many inconsistencies, duplications, and inefficiencies". You fool! We're\ just getting started with our first )Tj
T*
(excursion into unnecessary inconsistencies, duplications, and inefficien\cy. )Tj
0 -2.55714 TD
(Sure, countless brain-damaged programmers have inflicted literally dozen\s of compressed data formats )Tj
0 -1.2 TD
(upon the Data chunk, but apparently someone felt that even this wasn't e\nough to make your life )Tj
T*
(difficult in trying to support WAVE files. No, some half-wit decided tha\t it would be a good idea to )Tj
T*
(screw around with storing waveform data in something other than one Data\ chunk. )Tj
T*
(NOOOOOOOOOOOOOO!!!!!!)Tj
0 -2.55714 TD
(For some god-forsaken reason, someone came up with the idea of using an \imbedded IFF List inside of )Tj
0 -1.2 TD
(the WAVE file. NOOOOOOOOOOOOOOOOO!!!!!!!! And this "Wave List" would con\tain multiple )Tj
T*
('data' and 'slnt' chunks. NOOOOOOOOOOOOOOOO!!!! The Type ID for this Lis\t is 'wavl'.)Tj
0 -2.55714 TD
(I strongly suggest that you refuse to support any WAVE file that exhibit\s this Wave List nonsense. )Tj
0 -1.2 TD
(There's no need for it, and hopefully, the misguided programmer who conj\ured it up will be embarrassed )Tj
T*
(into hanging his head in shame when nobody agrees to support his foolish\ness. Just say )Tj
T*
("NOOOOOOOOOOOOOO!!!!")Tj
ET
0.5 0.5 0.5 rg
10 288 m
10 290 l
602 290 l
601 289 l
11 289 l
11 289 l
h
f
0.875 0.875 0.875 rg
602 290 m
602 288 l
10 288 l
11 289 l
601 289 l
601 289 l
h
f
1 0.50197 0.25098 rg
BT
/T1_1 1 Tf
16.15384 0 0 16.15384 10 247.84572 Tm
(Cue chunk)Tj
0 0 0 rg
/T1_0 1 Tf
14 0 0 14 10 211.59093 Tm
(The Cue chunk contains one or more "cue points" or "markers". Each cue p\oint references a specific )Tj
T*
(offset within the waveformData array, and has its own CuePoint structure\ within this chunk. )Tj
0 -2.55714 TD
(In conjunction with the Playlist chunk, the Cue chunk can be used to sto\re looping information.)Tj
/T1_1 1 Tf
0 -2.57446 TD
(CuePoint Structure)Tj
0 0.50197 0 rg
/T1_2 1 Tf
0 -2.54463 TD
(typedef struct)Tj
0 0 0 rg
( {)Tj
0 -1.2 TD
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(    dwIdentifier;)Tj
T*
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(    dwPosition;)Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(http://www.borg.com/~jglatt/tech/wave.htm \(9 of 19\)14.10.2003 14:26:15\)Tj
ET
EMC 

endstreamendobj118 0 obj 2488endobj119 0 obj<</Length 118 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(WAVE File Format)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/T1_1 1 Tf
14 0 0 14 10 753.90816 Tm
(  )Tj
0 0.50197 0 rg
(unsigned char)Tj
0 0 0 rg
( HighVelocity;)Tj
0 -1.2 TD
(} InstrumentChunk;)Tj
/T1_0 1 Tf
0 -2.55232 TD
(The ID is always )Tj
/T1_2 1 Tf
(inst)Tj
/T1_0 1 Tf
(. chunkSize should always be 7 since there are no fields of variable len\gth. )Tj
0 -2.55714 TD
(The UnshiftedNote field is the same as the Sampler chunk's dwMIDIUnityNo\te field.)Tj
T*
(The FineTune field determines how much the instrument should alter the p\itch of the sound when it is )Tj
0 -1.2 TD
(played back. Units are in cents \(1/100 of a semitone\) and range from -\50 to +50. Negative numbers )Tj
T*
(mean that the pitch of the sound should be lowered, while positive numbe\rs mean that it should be )Tj
T*
(raised. While not the same measurement is used, this field serves the sa\me purpose as the Sampler )Tj
T*
(chunk's dwFraction field.)Tj
0 -2.55714 TD
(The Gain field is the amount by which to change the gain of the sound wh\en it is played. Units are )Tj
0 -1.2 TD
(decibels. For example, 0db means no change, 6db means double the value o\f each sample point \(ie, )Tj
T*
(every additional 6db doubles the gain\), while -6db means halve the valu\e of each sample point.)Tj
0 -2.55714 TD
(The LowNote and HighNote fields specify the suggested MIDI note range on\ a keyboard for playback of )Tj
0 -1.2 TD
(the waveform data. The waveform data should be played if the instrument \is requested to play a note )Tj
T*
(between the low and high note numbers, inclusive. The UnshiftedNote does\ not have to be within this )Tj
T*
(range.)Tj
0 -2.55714 TD
(The LowVelocity and HighVelocity fields specify the suggested range of M\IDI velocities for playback )Tj
0 -1.2 TD
(of the waveform data. The waveform data should be played if the note-on \velocity is between low and )Tj
T*
(high velocity, inclusive. The range is 1 \(lowest velocity\) through 127\ \(highest velocity\), inclusive.)Tj
0 -2.55714 TD
(The Instrument Chunk is optional. No more than 1 Instrument Chunk can ap\pear in one WAVE.)Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(http://www.borg.com/~jglatt/tech/wave.htm \(19 of 19\)14.10.2003 14:26:1\5)Tj
ET
EMC 

endstreamendobj120 0 obj 3865endobj121 0 obj<</Length 120 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(WAVE File Format)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/T1_1 1 Tf
14 0 0 14 10 753.90814 Tm
(  ID      fccChunk;)Tj
0 -1.2 TD
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(    dwChunkStart;)Tj
T*
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(    dwBlockStart;)Tj
T*
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(    dwSampleOffset;)Tj
T*
(} CuePoint;)Tj
/T1_0 1 Tf
0 -2.55232 TD
(The dwIdentifier field contains a unique number \(ie, different than the\ ID number of any other CuePoint )Tj
0 -1.2 TD
(structure\). This is used to associate a CuePoint structure with other s\tructures used in other chunks )Tj
T*
(which will be described later. )Tj
0 -2.55714 TD
(The dwPosition field specifies the position of the cue point within the \"play order" \(as determined by the )Tj
0 -1.2 TD
(Playlist chunk. See that chunk for a discussion of the play order\).)Tj
0 -2.55714 TD
(The fccChunk field specifies the chunk ID of the Data or Wave List chunk\ which actually contains the )Tj
0 -1.2 TD
(waveform data to which this CuePoint refers. If there is only one Data c\hunk in the file, then this field is )Tj
T*
(set to the ID 'data'. On the other hand, if the file contains a Wave Lis\t \(which can contain both 'data' and )Tj
T*
('slnt' chunks\), then fccChunk will specify 'data' or 'slnt' depending u\pon in which type of chunk the )Tj
T*
(referenced waveform data is found.)Tj
0 -2.55714 TD
(The dwChunkStart and dwBlockStart fields are set to 0 for an uncompresse\d WAVE file that contains )Tj
0 -1.2 TD
(one 'data' chunk. These fields are used only for WAVE files that contain\ a Wave List \(with multiple )Tj
T*
('data' and 'slnt' chunks\), or for a compressed file containing a 'data'\ chunk. \(Actually, in the latter case, )Tj
T*
(dwChunkStart is also set to 0, and only dwBlockStart is used\). Again, I\ want to emphasize that you can )Tj
T*
(avoid all of this unnecessary crap if you avoid hassling with compressed\ files, or Wave Lists, and )Tj
T*
(instead stick to the sensible basics.)Tj
0 -2.55714 TD
(The dwChunkStart field specifies the byte offset of the start of the 'da\ta' or 'slnt' chunk which actually )Tj
0 -1.2 TD
(contains the waveform data to which this CuePoint refers. This offset is\ relative to the start of the first )Tj
T*
(chunk within the Wave List. \(ie, It's the byte offset, within the Wave \List, of where the 'data' or 'slnt' )Tj
T*
(chunk of interest appears. The first chunk within the List would be at a\n offset of 0\).)Tj
0 -2.55714 TD
(The dwBlockStart field specifies the byte offset of the start of the blo\ck containing the position. This )Tj
0 -1.2 TD
(offset is relative to the start of the waveform data within the 'data' o\r 'slnt' chunk.)Tj
0 -2.55714 TD
(The dwSampleOffset field specifies the sample offset of the cue point re\lative to the start of the block. In )Tj
0 -1.2 TD
(an uncompressed file, this equates to simply being the offset within the\ waveformData array. )Tj
T*
(Unfortunately, the WAVE documentation is much too ambiguous, and doesn't\ define what it means by )Tj
T*
(the term "sample offset". This could mean a byte offset, or it could mea\n counting the sample points \(for )Tj
T*
(example, in a 16-bit wave, every 2 bytes would be 1 sample point\), or i\t could even mean sample frames )Tj
T*
(\(as the loop offsets in AIFF are specified\). Who knows? The guy who co\njured up the Cue chunk )Tj
T*
(certainly isn't saying. I'm assuming that it's a byte offset, like the a\bove 2 fields.)Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(http://www.borg.com/~jglatt/tech/wave.htm \(10 of 19\)14.10.2003 14:26:1\5)Tj
ET
EMC 

endstreamendobj122 0 obj 3119endobj123 0 obj<</Length 122 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(WAVE File Format)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/T1_1 1 Tf
14 0 0 14 10 753.73297 Tm
(Cue Chunk)Tj
0 0.50197 0 rg
/T1_2 1 Tf
0 -2.54463 TD
(#define)Tj
0 0 0 rg
( CueID 'cue '  )Tj
0.64706 0.1647 0.1647 rg
(/* chunk ID for Cue Chunk */)Tj
0 0.50197 0 rg
0 -2.39999 TD
(typedef struct)Tj
0 0 0 rg
( {)Tj
0 -1.2 TD
(  ID        chunkID;)Tj
T*
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(      chunkSize;)Tj
0 -2.39999 TD
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(      dwCuePoints;)Tj
0 -1.2 TD
(  CuePoint  points[];)Tj
T*
(} CueChunk;)Tj
/T1_0 1 Tf
0 -2.55232 TD
(The ID is always )Tj
/T1_3 1 Tf
(cue )Tj
/T1_0 1 Tf
(. chunkSize is the number of bytes in the chunk, not counting the 8 byte\s used by )Tj
0 -1.2 TD
(ID and Size fields. )Tj
0 -2.55714 TD
(The dwCuePoints field is the number of CuePoint structures in the Cue Ch\unk. If dwCuePoints is not 0, )Tj
0 -1.2 TD
(it is followed by that many CuePoint structures, one after the other. Be\cause all fields in a CuePoint )Tj
T*
(structure are an even number of bytes, the length of any CuePoint will a\lways be even. Thus, CuePoints )Tj
T*
(are packed together with no unused bytes between them. The CuePoints nee\d not be placed in any )Tj
T*
(particular order.)Tj
0 -2.55714 TD
(The Cue chunk is optional. No more than one Cue chunk can appear in a WA\VE.)Tj
ET
0.5 0.5 0.5 rg
10 359.60001 m
10 361.60001 l
602 361.60001 l
601 360.60001 l
11 360.60001 l
11 360.60001 l
h
f
0.875 0.875 0.875 rg
602 361.60001 m
602 359.60001 l
10 359.60001 l
11 360.60001 l
601 360.60001 l
601 360.60001 l
h
f
1 0.50197 0.25098 rg
BT
/T1_1 1 Tf
16.15384 0 0 16.15384 10 319.44574 Tm
(Playlist chunk)Tj
0 0 0 rg
/T1_0 1 Tf
14 0 0 14 10 283.19092 Tm
(The Playlist \(plst\) chunk specifies a play order for a series of cue p\oints. The Cue chunk contains all of )Tj
0 -1.2 TD
(the cue points, but the Playlist chunk determines how those cue points a\re used when playing back the )Tj
T*
(waveform \(ie, which cue points represent looped sections, and in what o\rder those loops are "played"\). )Tj
T*
(The Playlist chunk contains one or more Segment structures, each of whic\h identifies a looped section of )Tj
T*
(the waveform \(in conjunction with the CuePoint structure with which it \is associated\). )Tj
/T1_1 1 Tf
0 -2.57446 TD
(Segment Structure)Tj
0 0.50197 0 rg
/T1_2 1 Tf
0 -2.54463 TD
(typedef struct)Tj
0 0 0 rg
( {)Tj
0 -1.2 TD
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(    dwIdentifier;)Tj
T*
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(    dwLength;)Tj
T*
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(    dwRepeats;)Tj
T*
(} Segment;)Tj
/T1_0 1 Tf
0 -2.55232 TD
(The dwIdentifier field contains a unique number \(ie, different than the\ ID number of any other Segment )Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(http://www.borg.com/~jglatt/tech/wave.htm \(11 of 19\)14.10.2003 14:26:1\5)Tj
ET
EMC 

endstreamendobj124 0 obj 3424endobj125 0 obj<</Length 124 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(WAVE File Format)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/T1_0 1 Tf
14 0 0 14 10 753.97552 Tm
(structure\). This field should correspond with the dwIndentifier field o\f some CuePoint stored in the Cue )Tj
0 -1.2 TD
(chunk. In other words, this Segment structure contains the looping infor\mation associated with that )Tj
T*
(CuePoint structure with the same ID number. )Tj
0 -2.55714 TD
(The dwLength field specifies the length of the section in samples \(ie, \the length of the looped section\). )Tj
0 -1.2 TD
(Note that the start position of the loop would be the dwSampleOffset of \the referenced CuePoint )Tj
T*
(structure in the Cue chunk. \(Or, you may need to hassle with the dwChun\kStart and dwBlockStart fields )Tj
T*
(as well if dealing with a Wave List or compressed data\).)Tj
0 -2.55714 TD
(The dwRepeats field specifies the number of times to play the loop. I as\sume that a value of 1 means to )Tj
0 -1.2 TD
(repeat this loop once only, but the WAVE documentation is very incomplet\e and omits this important )Tj
T*
(information. I have no idea how you would specify an infinitely repeatin\g loop. Certainly, the person )Tj
T*
(who conjured up the Playlist chunk appears to have no idea whatsoever. D\ue to the ambiguities, )Tj
T*
(inconsistencies, inefficiencies, and omissions of the Cue and Playlist c\hunks, I very much recommend )Tj
T*
(that you use the Sampler chunk \(described later\) to replace them.)Tj
/T1_1 1 Tf
0 -2.57446 TD
(Playlist chunk)Tj
0 0.50197 0 rg
/T1_2 1 Tf
0 -2.54463 TD
(#define)Tj
0 0 0 rg
( PlaylistID 'plst'  )Tj
0.64706 0.1647 0.1647 rg
(/* chunk ID for Playlist Chunk */)Tj
0 0.50197 0 rg
0 -2.39999 TD
(typedef struct)Tj
0 0 0 rg
( {)Tj
0 -1.2 TD
(  ID        chunkID;)Tj
0 -1.20001 TD
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(      chunkSize;)Tj
0 -2.39999 TD
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(      dwSegments;)Tj
0 -1.2 TD
(  Segment   Segments[];)Tj
T*
(} PlaylistChunk;)Tj
/T1_0 1 Tf
0 -2.55232 TD
(The ID is always )Tj
/T1_3 1 Tf
(plst)Tj
/T1_0 1 Tf
(. chunkSize is the number of bytes in the chunk, not counting the 8 byte\s used by )Tj
0 -1.2 TD
(ID and Size fields. )Tj
0 -2.55714 TD
(The dwSegments field is the number of Segment structures in the Playlist\ Chunk. If dwSegments is not )Tj
0 -1.2 TD
(0, it is followed by that many Segment structures, one after the other. \Because all fields in a Segment )Tj
T*
(structure are an even number of bytes, the length of any Segment will al\ways be even. Thus, Segments )Tj
T*
(are packed together with no unused bytes between them. The Segments need\ not be placed in any )Tj
T*
(particular order.)Tj
ET
0.5 0.5 0.5 rg
10 120 m
10 122 l
602 122 l
601 121 l
11 121 l
11 121 l
h
f
0.875 0.875 0.875 rg
602 122 m
602 120 l
10 120 l
11 121 l
601 121 l
601 121 l
h
f
1 0.50197 0.25098 rg
BT
/T1_1 1 Tf
16.15384 0 0 16.15384 10 79.84573 Tm
(Associated Data List)Tj
0 0 0 rg
/T1_0 1 Tf
14 0 0 14 10 43.59094 Tm
(The Associated Data List contains text "labels" or "names" that are asso\ciated with the CuePoint )Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(http://www.borg.com/~jglatt/tech/wave.htm \(12 of 19\)14.10.2003 14:26:1\5)Tj
ET
EMC 

endstreamendobj126 0 obj 3376endobj127 0 obj<</Length 126 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(WAVE File Format)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/T1_0 1 Tf
14 0 0 14 10 753.97552 Tm
(structures in the Cue chunk. In other words, this list contains the text\ labels for those CuePoints. )Tj
0 -2.55714 TD
(Again, we're talking about another imbedded IFF List within the WAVE fil\e. )Tj
0 -1.2 TD
(NOOOOOOOOOOOOOO!!!! What's a List? A List is simply a "master chunk" tha\t contains several )Tj
T*
("sub-chunks". Just like with any other chunk, the "master chunk" has an \ID and chunkSize, but inside of )Tj
T*
(this chunk are sub-chunks, each with its own ID and chunkSize. Of course\, the chunkSize for the master )Tj
T*
(chunk \(ie, List\) includes the size of all of these sub-chunks \(includ\ing their ID and chunkSize fields\).)Tj
0 -2.55714 TD
(The "Type ID" for the Associated Data List is "adtl". Remember that an I\FF list header has 3 fields:)Tj
0 0.50197 0 rg
/T1_1 1 Tf
0 -2.56195 TD
(typedef struct)Tj
0 0 0 rg
( {)Tj
0 -1.2 TD
(  ID      listID;      )Tj
0.64706 0.1647 0.1647 rg
(/* 'list' */)Tj
0 0 0 rg
T*
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(    chunkSize;   )Tj
0.64706 0.1647 0.1647 rg
(/* includes the Type ID below */)Tj
0 0 0 rg
T*
(  ID      typeID;     )Tj
0.64706 0.1647 0.1647 rg
(/* 'adtl' */)Tj
0 0 0 rg
T*
(} ListHeader;)Tj
/T1_0 1 Tf
0 -2.55232 TD
(There are several sub-chunks that may be found inside of the Associated \Data List. The ones that are )Tj
0 -1.2 TD
(important to WAVE format have IDs of "labl", "note", or "ltxt". Ignore t\he rest. Here are those 3 sub-)Tj
T*
(chunks and their fields: )Tj
0 -2.55714 TD
(The Associated Data List is optional. The WAVE documentation doesn't spe\cify if more than one can be )Tj
0 -1.2 TD
(contained in a WAVE file.)Tj
/T1_2 1 Tf
0 -2.57446 TD
(Label Chunk)Tj
0 0.50197 0 rg
/T1_1 1 Tf
0 -2.54463 TD
(#define)Tj
0 0 0 rg
( LabelID 'labl'  )Tj
0.64706 0.1647 0.1647 rg
(/* chunk ID for Label Chunk */)Tj
0 0.50197 0 rg
0 -2.39999 TD
(typedef struct)Tj
0 0 0 rg
( {)Tj
0 -1.2 TD
(  ID      chunkID;)Tj
T*
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(    chunkSize;)Tj
0 -2.39999 TD
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(    dwIdentifier;)Tj
0 -1.2 TD
(  )Tj
0 0.50197 0 rg
(char)Tj
0 0 0 rg
(    dwText[];)Tj
T*
(} LabelChunk;)Tj
/T1_0 1 Tf
0 -2.55232 TD
(The ID is always )Tj
/T1_3 1 Tf
(labl)Tj
/T1_0 1 Tf
(. chunkSize is the number of bytes in the chunk, not counting the 8 byte\s used by )Tj
0 -1.2 TD
(ID and Size fields nor any possible pad byte needed to make the chunk an\ even size \(ie, chunkSize is the )Tj
T*
(number of remaining bytes in the chunk after the chunkSize field, not co\unting any trailing pad byte\). )Tj
0 -2.55714 TD
(The dwIdentifier field contains a unique number \(ie, different than the\ ID number of any other Label )Tj
0 -1.2 TD
(chunk\). This field should correspond with the dwIndentifier field of so\me CuePoint stored in the Cue )Tj
T*
(chunk. In other words, this Label chunk contains the text label associat\ed with that CuePoint structure )Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(http://www.borg.com/~jglatt/tech/wave.htm \(13 of 19\)14.10.2003 14:26:1\5)Tj
ET
EMC 

endstreamendobj128 0 obj 2960endobj129 0 obj<</Length 128 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(WAVE File Format)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/T1_0 1 Tf
14 0 0 14 10 753.97552 Tm
(with the same ID number.)Tj
0 -2.55714 TD
(The dwText array contains the text label. It should be a null-terminated\ string. \(The null byte is included )Tj
0 -1.2 TD
(in the chunkSize, therefore the length of the string, including the null\ byte, is chunkSize - 4\).)Tj
/T1_1 1 Tf
0 -2.57446 TD
(Note Chunk)Tj
0 0.50197 0 rg
/T1_2 1 Tf
0 -2.54463 TD
(#define)Tj
0 0 0 rg
( NoteID 'note'  )Tj
0.64706 0.1647 0.1647 rg
(/* chunk ID for Note Chunk */)Tj
0 0.50197 0 rg
0 -2.39999 TD
(typedef struct)Tj
0 0 0 rg
( {)Tj
0 -1.2 TD
(  ID      chunkID;)Tj
T*
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(    chunkSize;)Tj
0 -2.39999 TD
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(    dwIdentifier;)Tj
0 -1.2 TD
(  )Tj
0 0.50197 0 rg
(char)Tj
0 0 0 rg
(    dwText[];)Tj
T*
(} NoteChunk;)Tj
/T1_0 1 Tf
0 -2.55232 TD
(The Note chunk, whose ID is )Tj
/T1_3 1 Tf
(note)Tj
/T1_0 1 Tf
(, is otherwise exactly the same as the Label chunk \(ie, same fields\). \)Tj
0 -1.2 TD
(See what I mean about pointless duplication? But, in theory, a Note chun\k contains a "comment" about a )Tj
T*
(CuePoint, whereas the Label chunk is supposed to contain the actual CueP\oint label. So, it's possible )Tj
T*
(that you'll find both a Note and Label for a specific CuePoint, each con\taining different text. )Tj
/T1_1 1 Tf
0 -2.57446 TD
(Labeled Text Chunk)Tj
0 0.50197 0 rg
/T1_2 1 Tf
0 -2.54463 TD
(#define)Tj
0 0 0 rg
( LabelTextID 'ltxt'  )Tj
0.64706 0.1647 0.1647 rg
(/* chunk ID for Labeled Text Chunk */)Tj
0 0.50197 0 rg
0 -2.39999 TD
(typedef struct)Tj
0 0 0 rg
( {)Tj
0 -1.2 TD
(  ID      chunkID;)Tj
T*
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(    chunkSize;)Tj
0 -2.39999 TD
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(    dwIdentifier;)Tj
0 -1.2 TD
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(    dwSampleLength;)Tj
T*
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(    dwPurpose;)Tj
T*
(  )Tj
0 0.50197 0 rg
(short)Tj
0 0 0 rg
(   wCountry;)Tj
T*
(  )Tj
0 0.50197 0 rg
(short)Tj
0 0 0 rg
(   wLanguage;)Tj
T*
(  )Tj
0 0.50197 0 rg
(short)Tj
0 0 0 rg
(   wDialect;)Tj
T*
(  )Tj
0 0.50197 0 rg
(short)Tj
0 0 0 rg
(   wCodePage;)Tj
T*
(  )Tj
0 0.50197 0 rg
(char)Tj
0 0 0 rg
(    dwText[];)Tj
T*
(} LabelTextChunk;)Tj
/T1_0 1 Tf
0 -2.55232 TD
(The ID is always )Tj
/T1_3 1 Tf
(ltxt)Tj
/T1_0 1 Tf
(. chunkSize is the number of bytes in the chunk, not counting the 8 byte\s used by )Tj
0 -1.2 TD
(ID and Size fields nor any possible pad byte needed to make the chunk an\ even size \(ie, chunkSize is the )Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(http://www.borg.com/~jglatt/tech/wave.htm \(14 of 19\)14.10.2003 14:26:1\5)Tj
ET
EMC 

endstreamendobj130 0 obj 3618endobj131 0 obj<</Length 130 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(WAVE File Format)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/T1_0 1 Tf
14 0 0 14 10 753.97552 Tm
(number of remaining bytes in the chunk after the chunkSize field, not co\unting any trailing pad byte\). )Tj
0 -2.55714 TD
(The dwIdentifier field is the same as the Label chunk.)Tj
T*
(The dwSampleLength field specifies the number of sample points in the se\gment of waveform data. In )Tj
0 -1.2 TD
(other words, a Labeled Text chunk contains a label for a )Tj
/T1_1 1 Tf
(section)Tj
/T1_0 1 Tf
( of the waveform data, not just a specific )Tj
T*
(point, for example the looped section of a waveform.)Tj
0 -2.55714 TD
(The dwPurpose field specifies the type or purpose of the text. For examp\le, dwPurpose can contain an )Tj
0 -1.2 TD
(ID like "scrp" for script text or "capt" for close-caption text. How is \this related to waveform data? Well, )Tj
T*
(it isn't really. It's just that Associated Data Lists are used in other \file formats, so they contain generic )Tj
T*
(fields that sometimes don't have much relevance to waveform data.)Tj
0 -2.55714 TD
(The wCountry, wLanguage, and wCodePage fields specify the country code, \language/dialect, and code )Tj
0 -1.2 TD
(page for the text. An application typically queries these values from th\e operating system.)Tj
ET
0.5 0.5 0.5 rg
10 477.20001 m
10 479.20001 l
602 479.20001 l
601 478.20001 l
11 478.20001 l
11 478.20001 l
h
f
0.875 0.875 0.875 rg
602 479.20001 m
602 477.20001 l
10 477.20001 l
11 478.20001 l
601 478.20001 l
601 478.20001 l
h
f
1 0.50197 0.25098 rg
BT
/T1_2 1 Tf
16.15384 0 0 16.15384 10 437.04572 Tm
(Sampler Chunk)Tj
0 0 0 rg
/T1_0 1 Tf
14 0 0 14 10 400.79092 Tm
(The Sampler \(smpl\) Chunk defines basic parameters that an instrument, \such as a MIDI sampler, could )Tj
T*
(use to play the waveform data. Most importantly, it includes information\ about looping the waveform )Tj
T*
(\(ie, during playback, to "sustain" the waveform\). Of course, as you've\ come to expect from the WAVE )Tj
T*
(file format, it duplicates some of the information that can be found in \the Cue and Playlist chunks, but )Tj
T*
(fortunately, in a more sensible, consistent, better-documented way.)Tj
0 0.50197 0 rg
/T1_3 1 Tf
0 -2.56197 TD
(#define)Tj
0 0 0 rg
( SamplerID 'smpl'  )Tj
0.64706 0.1647 0.1647 rg
(/* chunk ID for Sampler Chunk */)Tj
0 0.50197 0 rg
0 -2.39999 TD
(typedef struct)Tj
0 0 0 rg
( {)Tj
0 -1.2 TD
(  ID             chunkID;)Tj
T*
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(           chunkSize;)Tj
0 -2.39999 TD
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(           dwManufacturer;)Tj
0 -1.2 TD
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(           dwProduct;)Tj
T*
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(           dwSamplePeriod;)Tj
T*
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(           dwMIDIUnityNote;)Tj
T*
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(           dwMIDIPitchFraction;)Tj
T*
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(           dwSMPTEFormat;)Tj
T*
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(           dwSMPTEOffset;)Tj
T*
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(           cSampleLoops;)Tj
T*
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(           cbSamplerData;)Tj
T*
(  )Tj
0 0.50197 0 rg
(struct)Tj
0 0 0 rg
( SampleLoop Loops[];)Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(http://www.borg.com/~jglatt/tech/wave.htm \(15 of 19\)14.10.2003 14:26:1\5)Tj
ET
EMC 

endstreamendobj132 0 obj 3784endobj133 0 obj<</Length 132 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(WAVE File Format)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/T1_1 1 Tf
14 0 0 14 10 753.90814 Tm
(} SamplerChunk;)Tj
/T1_0 1 Tf
0 -2.55232 TD
(The ID is always )Tj
/T1_2 1 Tf
(smpl)Tj
/T1_0 1 Tf
(. chunkSize is the number of bytes in the chunk, not counting the 8 byte\s used by )Tj
0 -1.2 TD
(ID and Size fields nor any possible pad byte needed to make the chunk an\ even size \(ie, chunkSize is the )Tj
T*
(number of remaining bytes in the chunk after the chunkSize field, not co\unting any trailing pad byte\). )Tj
0 -2.55714 TD
(The dwManufacturer field contains the MMA Manufacturer code for the inte\nded sampler. Each )Tj
0 -1.2 TD
(manufacturer of MIDI products has his own ID assigned to him by the MIDI\ Manufacturer's )Tj
T*
(Association. See the MIDI Specification \(under )Tj
ET
0 0 1 RG
0.7056 w 10 M 0 j 0 J []0 d 
280.22803 613.05872 m
380.17401 613.05872 l
S
0 0 1 rg
BT
/T1_0 1 Tf
14 0 0 14 280.22803 615.17554 Tm
(System Exclusive)Tj
0 0 0 rg
(\) for a listing of current Manufacturer )Tj
-19.302 -1.34286 Td
(IDs. The high byte of dwManufacturer indicates the number of low order b\ytes \(1 or 3\) that are valid for )Tj
T*
(the manufacturer code. For example, this value will be 0x01000013 for Di\gidesign \(the MMA )Tj
T*
(Manufacturer code is one byte, 0x13\); whereas 0x03000041 identifies Mic\rosoft \(the MMA )Tj
T*
(Manufacturer code is three bytes, 0x00 0x00 0x41\). If the WAVE is not i\ntended for a specific )Tj
T*
(manufacturer, then this field should be set to 0.)Tj
0 -2.55714 TD
(The dwProduct field contains the Product code \(ie, model ID\) of the in\tended sampler for the )Tj
0 -1.2 TD
(dwManufacturer. Contact the manufacturer of the sampler to ascertain the\ sampler's model ID. If the )Tj
T*
(WAVE is not intended for a specific manufacturer's product, then this fi\eld should be set to 0.)Tj
0 -2.55714 TD
(The dwSamplePeriod field specifies the period of one sample in nanosecon\ds \(normally 1/)Tj
0 -1.2 TD
(nSamplesPerSec from the Format chunk. But note that this field allows fi\ner tuning than )Tj
T*
(nSamplesPerSec\). For example, 44.1 KHz would be specified as 22675 \(0x\00005893\).)Tj
0 -2.55714 TD
(The dwMIDIUnityNote field is the MIDI note number at which the instrumen\t plays back the waveform )Tj
0 -1.2 TD
(data without pitch modification \(ie, at the same sample rate that was u\sed when the waveform was )Tj
T*
(created\). This value ranges 0 through 127, inclusive. Middle C is 60.)Tj
0 -2.55714 TD
(The dwMIDIPitchFraction field specifies the fraction of a semitone up fr\om the specified )Tj
0 -1.2 TD
(dwMIDIUnityNote. A value of 0x80000000 is 1/2 semitone \(50 cents\); a v\alue of 0x00000000 )Tj
T*
(represents no fine tuning between semitones.)Tj
0 -2.55714 TD
(The dwSMPTEFormat field specifies the SMPTE time format used in the dwSM\PTEOffset field. )Tj
0 -1.2 TD
(Possible values are:)Tj
/T1_3 1 Tf
0 -2.56197 TD
(0  = no SMPTE offset \(dwSMPTEOffset should also be 0\))Tj
0 -1.2 TD
(24 = 24 frames per second)Tj
T*
(25 = 25 frames per second)Tj
T*
(29 = 30 frames per second with frame dropping \('30 drop'\))Tj
T*
(30 = 30 frames per second       )Tj
/T1_0 1 Tf
0 -2.55232 TD
(The dwSMPTEOffset field specifies a time offset for the sample if it is \to be syncronized or calibrated )Tj
0 -1.2 TD
(according to a start time other than 0. The format of this value is 0xhh\mmssff. hh is a signed Hours )Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(http://www.borg.com/~jglatt/tech/wave.htm \(16 of 19\)14.10.2003 14:26:1\5)Tj
ET
EMC 

endstreamendobj134 0 obj 3536endobj135 0 obj<</Length 134 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(WAVE File Format)Tj
ET
EMC 
/WebCaptureBG BMC 
/WebCaptureFN <</L 0 >>BDC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [48.662 55.60001 308.02399 74.39999 ]>>BDC 
Q
0.60001 0.8 0.8 rg
48.662 55.60001 259.362 18.8 re
f
EMC 
EMC 
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0 0 0 rg
BT
/T1_0 1 Tf
14 0 0 14 10 753.97552 Tm
(value [-23..23]. mm is an unsigned Minutes value [0..59]. ss is unsigned\ Seconds value [0..59]. ff is an )Tj
0 -1.2 TD
(unsigned value [0..\( - 1\)]. )Tj
0 -2.55714 TD
(The cSampleLoops field is the number \(count\) of SampleLoop structures \that are appended to this )Tj
0 -1.2 TD
(chunk. These structures immediately follow the cbSamplerData field. This\ field will be 0 if there are no )Tj
T*
(SampleLoop structures.)Tj
0 -2.55714 TD
(The cbSamplerData field specifies the size \(in bytes\) of any optional \fields that an application wishes to )Tj
0 -1.2 TD
(append to this chunk. An application which needed to save additional inf\ormation \(ie, beyond the above )Tj
T*
(fields\) may append additional fields to the end of this chunk, after al\l of the SampleLoop structures. )Tj
T*
(These additional fields are also reflected in the ChunkSize, and remembe\r that the chunk should be )Tj
T*
(padded out to an even number of bytes. The cbSamplerData field will be 0\ if no additional information )Tj
T*
(is appended to the chunk.)Tj
0 -2.55714 TD
(What follows the above fields are any SampleLoop structures. Each Sample\Loop structure defines one )Tj
0 -1.2 TD
(loop \(ie, the start and end points of the loop, and how many times it p\lays\). What follows any )Tj
T*
(SampleLoop structures are any additional, proprietary sampler informatio\n that an application chooses )Tj
T*
(to store.)Tj
/T1_1 1 Tf
0 -2.57446 TD
(SampleLoop Structure)Tj
0 0.50197 0 rg
/T1_2 1 Tf
0 -2.54463 TD
(typedef struct)Tj
0 0 0 rg
( {)Tj
0 -1.2 TD
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(  dwIdentifier;)Tj
T*
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(  dwType;)Tj
T*
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(  dwStart;)Tj
T*
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(  dwEnd;)Tj
T*
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(  dwFraction;)Tj
T*
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(  dwPlayCount;)Tj
T*
(} SampleLoop;)Tj
/T1_0 1 Tf
0 -2.55232 TD
(The dwIdentifier field contains a unique number \(ie, different than the\ ID number of any other )Tj
0 -1.2 TD
(SampleLoop structure\). This field may correspond with the dwIdentifier \field of some CuePoint stored )Tj
T*
(in the Cue chunk. In other words, the CuePoint structure which has the s\ame ID number would be )Tj
T*
(considered to be describing the same loop as this SampleLoop structure. \Furthermore, this field )Tj
T*
(corresponds to the dwIndentifier field of any label stored in the Associ\ated Data List. In other words, the )Tj
T*
(text string \(within some chunk in the Associated Data List\) which has \the same ID number would be )Tj
T*
(considered to be this loop's "name" or "label".)Tj
0 -2.55714 TD
(The dwType field is the loop type \(ie, how the loop plays back\) as so:\)Tj
0.21429 -2.77142 Td
(0)Tj
2.61871 0 Td
(Loop forward \(normal\))Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
0 0 0 rg
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(http://www.borg.com/~jglatt/tech/wave.htm \(17 of 19\)14.10.2003 14:26:1\5)Tj
ET
EMC 

endstreamendobj136 0 obj 3852endobj137 0 obj<</Length 136 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(WAVE File Format)Tj
ET
EMC 
/WebCaptureBG BMC 
/WebCaptureFN <</L 0 >>BDC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [48.662 745.20001 308.02399 764 ]>>BDC 
Q
0.60001 0.8 0.8 rg
48.662 745.20001 259.362 18.8 re
f
EMC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [48.662 724.40002 308.02399 743.20001 ]>>BDC 
Q
48.662 724.39996 259.362 18.8 re
f
EMC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [48.662 703.59998 308.02399 722.40002 ]>>BDC 
Q
48.662 703.59998 259.362 18.8 re
f
EMC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [48.662 682.79999 308.02399 701.59998 ]>>BDC 
Q
48.662 682.79999 259.362 18.8 re
f
EMC 
EMC 
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0 0 0 rg
BT
/T1_0 1 Tf
14 0 0 14 13 750.97552 Tm
(1)Tj
2.61871 0 Td
(Alternating loop \(forward/backward\))Tj
-2.61871 -1.4857 Td
(2)Tj
2.61871 0 Td
(Loop backward)Tj
-2.61871 -1.48572 Td
(3 - 31)Tj
2.61871 0 Td
(reserved for future standard types)Tj
-2.61871 -1.4857 Td
(32 - ?)Tj
2.61871 0 Td
(sampler specific types \(manufacturer defined\))Tj
-2.83299 -2.77142 Td
(The dwStart field specifies the startpoint of the loop. In other words, \it's the byte offset from the start of )Tj
0 -1.2 TD
(waveformData[], where an offset of 0 would be at the start of the wavefo\rmData[] array \(ie, the loop )Tj
T*
(start is at the very first sample point\). )Tj
0 -2.55714 TD
(The dwEnd field specifies the endpoint of the loop \(ie, a byte offset\)\.)Tj
T*
(The dwFraction field allows fine-tuning for loop fractional areas betwee\n samples. Values range from )Tj
0 -1.2 TD
(0x00000000 to 0xFFFFFFFF. A value of 0x80000000 represents 1/2 of a samp\le length.)Tj
0 -2.55714 TD
(The dwPlayCount field is the number of times to play the loop. A value o\f 0 specifies an infinite sustain )Tj
0 -1.2 TD
(loop \(ie, the wave keeps looping until some external force interrupts p\layback, such as the musician )Tj
T*
(releasing the key that triggered that wave's playback\).)Tj
0 -2.55714 TD
(The Sampler Chunk is optional. I don't know as if there is any limit of \one per WAVE file. I don't see )Tj
0 -1.2 TD
(why there should be such a limit, since after all, an application may ne\ed to deal with several MIDI )Tj
T*
(samplers.)Tj
ET
0.5 0.5 0.5 rg
10 356.20001 m
10 358.20001 l
602 358.20001 l
601 357.20001 l
11 357.20001 l
11 357.20001 l
h
f
0.875 0.875 0.875 rg
602 358.20001 m
602 356.20001 l
10 356.20001 l
11 357.20001 l
601 357.20001 l
601 357.20001 l
h
f
1 0.50197 0.25098 rg
BT
/T1_1 1 Tf
16.15384 0 0 16.15384 10 316.04572 Tm
(Instrument chunk)Tj
0 0 0 rg
/T1_0 1 Tf
14 0 0 14 10 279.79092 Tm
(The Instrument Chunk contains some of the same type of information as th\e Sampler chunk. So what )Tj
T*
(else is new? )Tj
0 0.50197 0 rg
/T1_2 1 Tf
0 -2.56197 TD
(#define)Tj
0 0 0 rg
( InstrumentID 'inst'  )Tj
0.64706 0.1647 0.1647 rg
(/* chunkID for Instruments Chunk */)Tj
0 0.50197 0 rg
0 -2.39999 TD
(typedef struct)Tj
0 0 0 rg
( {)Tj
0 -1.2 TD
(  ID     chunkID;)Tj
T*
(  )Tj
0 0.50197 0 rg
(long)Tj
0 0 0 rg
(   chunkSize;)Tj
0 -2.39999 TD
(  )Tj
0 0.50197 0 rg
(unsigned char)Tj
0 0 0 rg
( UnshiftedNote;)Tj
0 -1.2 TD
(  )Tj
0 0.50197 0 rg
(char)Tj
0 0 0 rg
(          FineTune;)Tj
T*
(  )Tj
0 0.50197 0 rg
(char)Tj
0 0 0 rg
(          Gain;)Tj
T*
(  )Tj
0 0.50197 0 rg
(unsigned char)Tj
0 0 0 rg
( LowNote;)Tj
T*
(  )Tj
0 0.50197 0 rg
(unsigned char)Tj
0 0 0 rg
( HighNote;)Tj
T*
(  )Tj
0 0.50197 0 rg
(unsigned char)Tj
0 0 0 rg
( LowVelocity;)Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
0 0 0 rg
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(http://www.borg.com/~jglatt/tech/wave.htm \(18 of 19\)14.10.2003 14:26:1\5)Tj
ET
EMC 

endstreamendobj138 0 obj(WAVE File Format)endobj139 0 obj<</C 143 0 R/V 1.25>>endobj140 0 obj<</S 141 0 R/URL(http://www.borg.com/~jglatt/tech/wave.htm)>>endobj141 0 obj<</G 142 0 R>>endobj142 0 obj<</PS[792.0 612.0]/M[10.080002 10.080002 26.0 36.0]/S 0/AS 1/PO 0/AT 70/AH 0/AL 0/CB 0/SU 1>>endobj143 0 obj[140 0 R]endobj144 0 obj(http://www.borg.com/~jglatt/tech/wave.htm)endobj145 0 obj(€Ôè:"∏ ØYÓ~ùøÍãq)endobj146 0 obj<</ID 145 0 R/O[11 0 R 17 0 R 19 0 R 21 0 R 23 0 R 25 0 R 27 0 R 29 0 R 31 0 R 33 0 R 35 0 R 45 0 R 49 0 R 53 0 R 57 0 R 61 0 R 69 0 R 73 0 R 78 0 R]/S/SPS/T 138 0 R/CT(text/html)/SI 147 0 R/TID 148 0 R/TS(D:20031014102615)>>endobj147 0 obj<</AU 144 0 R/TS(D:20031014102615)>>endobj148 0 obj(®TùY’œ;A{cﬂÂGT)endobj149 0 obj<</IDS 150 0 R/URLS 151 0 R>>endobj150 0 obj<</Names[145 0 R 146 0 R]>>endobj151 0 obj<</Names[144 0 R 146 0 R]>>endobj152 0 obj<</Count 1/Parent 6 0 R/First 153 0 R/Last 153 0 R/Title(borg.com)>>endobj153 0 obj<</Parent 152 0 R/Dest[11 0 R/XYZ 0 792 null]/Title(WAVE File Format)/SE 10 0 R>>endobj154 0 obj<</Length 3238/Type/Metadata/Subtype/XML>>stream
<?xpacket begin='Ôªø' id='W5M0MpCehiHzreSzNTczkc9d'?>
<?adobe-xap-filters esc="CRLF"?>
<x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 2.9.1-13, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>
<rdf:Description rdf:about='uuid:5028ef49-f652-43d7-bc05-4cd57fb913af' xmlns:pdf='http://ns.adobe.com/pdf/1.3/' pdf:Producer='Acrobat Web Capture 6.0'></rdf:Description>
<rdf:Description rdf:about='uuid:5028ef49-f652-43d7-bc05-4cd57fb913af' xmlns:xap='http://ns.adobe.com/xap/1.0/' xap:ModifyDate='2003-10-14T12:26:15+02:00' xap:CreateDate='2003-10-14T12:26:13Z' xap:MetadataDate='2003-10-14T12:26:15+02:00'></rdf:Description>
<rdf:Description rdf:about='uuid:5028ef49-f652-43d7-bc05-4cd57fb913af' xmlns:xapMM='http://ns.adobe.com/xap/1.0/mm/' xapMM:DocumentID='uuid:d48cb295-cd85-4ceb-9c0f-a93bb429c14f'/>
<rdf:Description rdf:about='uuid:5028ef49-f652-43d7-bc05-4cd57fb913af' xmlns:dc='http://purl.org/dc/elements/1.1/' dc:format='application/pdf'><dc:title><rdf:Alt><rdf:li xml:lang='x-default'>WAVE File Format</rdf:li></rdf:Alt></dc:title></rdf:Description>
</rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end='w'?>
endstreamendobjxref
0 155
0000000004 65535 f
0000000016 00000 n
0000000146 00000 n
0000000212 00000 n
0000000042 00001 f
0000000354 00000 n
0000000374 00000 n
0000000442 00000 n
0000000543 00000 n
0000000587 00000 n
0000000634 00000 n
0000001237 00000 n
0000001459 00000 n
0000001665 00000 n
0000001689 00000 n
0000001876 00000 n
0000001907 00000 n
0000002094 00000 n
0000002290 00000 n
0000002314 00000 n
0000002510 00000 n
0000002534 00000 n
0000002718 00000 n
0000002742 00000 n
0000002938 00000 n
0000002962 00000 n
0000003170 00000 n
0000003194 00000 n
0000003390 00000 n
0000003414 00000 n
0000003634 00000 n
0000003658 00000 n
0000003854 00000 n
0000003878 00000 n
0000004062 00000 n
0000004086 00000 n
0000004295 00000 n
0000004388 00000 n
0000004481 00000 n
0000004571 00000 n
0000004664 00000 n
0000004753 00000 n
0000000043 00001 f
0000000046 00001 f
0000004839 00000 n
0000004863 00000 n
0000000047 00001 f
0000000050 00001 f
0000005072 00000 n
0000005096 00000 n
0000000051 00001 f
0000000054 00001 f
0000005305 00000 n
0000005329 00000 n
0000000055 00001 f
0000000058 00001 f
0000005538 00000 n
0000005562 00000 n
0000000059 00001 f
0000000064 00001 f
0000005771 00000 n
0000005795 00000 n
0000006018 00000 n
0000006139 00000 n
0000000065 00001 f
0000000070 00001 f
0000006230 00000 n
0000006254 00000 n
0000006448 00000 n
0000006472 00000 n
0000000071 00001 f
0000000075 00001 f
0000006669 00000 n
0000006693 00000 n
0000006890 00000 n
0000000076 00001 f
0000000079 00001 f
0000006981 00000 n
0000007005 00000 n
0000000080 00001 f
0000000082 00001 f
0000007202 00000 n
0000000083 00001 f
0000000084 00001 f
0000000085 00001 f
0000000086 00001 f
0000000087 00001 f
0000000088 00001 f
0000000089 00001 f
0000000090 00001 f
0000000091 00001 f
0000000092 00001 f
0000000093 00001 f
0000000094 00001 f
0000000095 00001 f
0000000096 00001 f
0000000097 00001 f
0000000098 00001 f
0000000099 00001 f
0000000000 00001 f
0000007226 00000 n
0000007248 00000 n
0000010770 00000 n
0000010792 00000 n
0000013907 00000 n
0000013929 00000 n
0000017805 00000 n
0000017827 00000 n
0000021780 00000 n
0000021802 00000 n
0000024857 00000 n
0000024879 00000 n
0000028012 00000 n
0000028034 00000 n
0000031649 00000 n
0000031671 00000 n
0000034589 00000 n
0000034611 00000 n
0000037940 00000 n
0000037962 00000 n
0000040505 00000 n
0000040527 00000 n
0000044447 00000 n
0000044469 00000 n
0000047643 00000 n
0000047665 00000 n
0000051144 00000 n
0000051166 00000 n
0000054597 00000 n
0000054619 00000 n
0000057634 00000 n
0000057656 00000 n
0000061329 00000 n
0000061351 00000 n
0000065190 00000 n
0000065212 00000 n
0000068803 00000 n
0000068825 00000 n
0000072732 00000 n
0000072767 00000 n
0000072805 00000 n
0000072883 00000 n
0000072914 00000 n
0000073024 00000 n
0000073050 00000 n
0000073110 00000 n
0000073145 00000 n
0000073387 00000 n
0000073440 00000 n
0000073475 00000 n
0000073521 00000 n
0000073565 00000 n
0000073609 00000 n
0000073694 00000 n
0000073792 00000 n
trailer
<</Size 155/Root 1 0 R/Info 3 0 R/ID[<103eded0374fad40831213b94e4d1cb5><a1fcccf040b61c4ba0301004d74ae400>]>>
startxref
77108
%%EOF
